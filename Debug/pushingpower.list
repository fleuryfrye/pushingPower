
pushingpower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002268  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080023f0  080023f0  000033f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002420  08002420  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002420  08002420  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002420  08002420  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002420  08002420  00003420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002424  08002424  00003424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002428  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000039bf  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000db8  00000000  00000000  000079fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a0  00000000  00000000  000087b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000297  00000000  00000000  00008b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019711  00000000  00000000  00008def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000046ec  00000000  00000000  00022500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095b6c  00000000  00000000  00026bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bc758  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000dac  00000000  00000000  000bc79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000bd548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023d8 	.word	0x080023d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023d8 	.word	0x080023d8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4907      	ldr	r1, [pc, #28]	@ (800081c <__NVIC_EnableIRQ+0x38>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100

08000820 <main>:
extern volatile int16_t adcData; //raw signed 12 bit data.
extern volatile uint8_t ADCRDY;


int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fa2d 	bl	8000c84 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f92b 	bl	8000a84 <SystemClock_Config>

  initGPIO();
 800082e:	f000 f89b 	bl	8000968 <initGPIO>
  initADC();
 8000832:	f000 f817 	bl	8000864 <initADC>

  int16_t piezoVoltage;

  while (1)
  {
    chargePiezo();
 8000836:	f000 f8cf 	bl	80009d8 <chargePiezo>
    HAL_Delay(1000);
 800083a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800083e:	f000 fa87 	bl	8000d50 <HAL_Delay>
    dischargePiezo();
 8000842:	f000 f8e1 	bl	8000a08 <dischargePiezo>
    HAL_Delay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084a:	f000 fa81 	bl	8000d50 <HAL_Delay>


    getPiezoVoltage(&piezoVoltage);
 800084e:	1dbb      	adds	r3, r7, #6
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f8f1 	bl	8000a38 <getPiezoVoltage>

    HAL_Delay(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800085a:	f000 fa79 	bl	8000d50 <HAL_Delay>
    chargePiezo();
 800085e:	bf00      	nop
 8000860:	e7e9      	b.n	8000836 <main+0x16>
	...

08000864 <initADC>:

  }
}

static void initADC(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	GPIOA->MODER |= (ADC_INPUT_MODE << (ADC_PIN * 2));
 8000868:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000872:	f043 0303 	orr.w	r3, r3, #3
 8000876:	6013      	str	r3, [r2, #0]
	RCC->AHBENR |= (1 << ADC_CLK_EN); // enable ADC clock
 8000878:	4b38      	ldr	r3, [pc, #224]	@ (800095c <initADC+0xf8>)
 800087a:	695b      	ldr	r3, [r3, #20]
 800087c:	4a37      	ldr	r2, [pc, #220]	@ (800095c <initADC+0xf8>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6153      	str	r3, [r2, #20]


	NVIC_EnableIRQ(ADC1_2_IRQn); //Register the interrupt with NVIC
 8000884:	2012      	movs	r0, #18
 8000886:	f7ff ffad 	bl	80007e4 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800088a:	b662      	cpsie	i
}
 800088c:	bf00      	nop




	//Voltage regular must start up before calibration.
	ADC1->CR &= ~(1 << ADC1_CR_VREG_MSB);
 800088e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000898:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800089c:	6093      	str	r3, [r2, #8]
	ADC1->CR |= (1 << ADC1_CR_VREG_LSB); //startup vreg
 800089e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	6093      	str	r3, [r2, #8]
	HAL_Delay(1); //must wait at least 10 us after starting up the vreg
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 fa4e 	bl	8000d50 <HAL_Delay>



	//Recommended to calibrate the ADC on startup.
	ADC1->CR |= (1 << ADC1_CR_CAL);
 80008b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008c2:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & (1 << ADC1_CR_CAL)); // hardware clears cal bit when finished.
 80008c4:	bf00      	nop
 80008c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	dbfa      	blt.n	80008c6 <initADC+0x62>


	//Enable ADC_READY and end of conversion interrupts
	ADC1->IER |= (1 << ADC_RDY);
 80008d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6053      	str	r3, [r2, #4]
	ADC1->IER |= (1 << ADC_EOC);
 80008e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6053      	str	r3, [r2, #4]


	ADC12_COMMON->CCR |= (2 << ADC1_CCR_CKMODE); //Set ADC clock to 36 MHz. (prescaler = /2)
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <initADC+0xfc>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000960 <initADC+0xfc>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fa:	6093      	str	r3, [r2, #8]

	ADC1->SQR1 |= (ADC1_CHANNEL_1 << ADC1_SQR1_SQ1); //activate channel 1.
 80008fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800090a:	6313      	str	r3, [r2, #48]	@ 0x30
	//note: length bit field is left as 0 because we are only doing 1 conversion.

	//sampling time will be 1.5 ADC clock cycles.

	ADC1->CFGR |= (1 << ADC1_CFGR_CONT); //continuously sample
 800090c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000916:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800091a:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (1 << ADC1_CFGR_OVRMOD); // if sample is missed, overwrite with newest
 800091c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000926:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800092a:	60d3      	str	r3, [r2, #12]

	//Data will be 12 bits signed and right aligned.


	ADC1->CR |= (1 << ADC1_CR_EN); //Enable the ADC and wait for it to be ready.
 800092c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6093      	str	r3, [r2, #8]

	while(!ADCRDY); //Interrupt will set ADCREADY.
 800093c:	bf00      	nop
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <initADC+0x100>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0fa      	beq.n	800093e <initADC+0xda>


	ADC1->CR |= (1 << ADC1_CR_ADSTART); //Begin sampling!
 8000948:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	6093      	str	r3, [r2, #8]


}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	50000300 	.word	0x50000300
 8000964:	2000002a 	.word	0x2000002a

08000968 <initGPIO>:

static void initGPIO(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
	//Peripheral clocks turned off by default, each GPIO port has a clock that must be activated first.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <initGPIO+0x6c>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a18      	ldr	r2, [pc, #96]	@ (80009d4 <initGPIO+0x6c>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <initGPIO+0x6c>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

	GPIOA->MODER |= (OUTPUT_MODE << (PIEZO_CHARGE_PIN * 2));
 8000986:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000994:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (OUTPUT_MODE << (PIEZO_DISCHARGE_PIN * 2));
 8000996:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009a4:	6013      	str	r3, [r2, #0]


	GPIOA->OSPEEDR |= (HIGH_SPEED_OUTPUT << (PIEZO_CHARGE_PIN * 2));
 80009a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009b0:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80009b4:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (HIGH_SPEED_OUTPUT << (PIEZO_DISCHARGE_PIN * 2));
 80009b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80009c4:	6093      	str	r3, [r2, #8]

	return;
 80009c6:	bf00      	nop
}
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <chargePiezo>:

static void chargePiezo(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	//Before activating, make sure that the discharge transistor is turned off!
	if(GPIOA->ODR & PIEZO_DISCHARGE_PIN_HIGH)
 80009dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d004      	beq.n	80009f4 <chargePiezo+0x1c>
	{
		GPIOA->BRR = PIEZO_DISCHARGE_PIN_HIGH; //clear discharge pin bit
 80009ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f2:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	//Activate the transistor to begin charging the piezo.
	GPIOA->BSRR = PIEZO_CHARGE_PIN_HIGH;
 80009f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fc:	619a      	str	r2, [r3, #24]
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <dischargePiezo>:

static void dischargePiezo(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	//Before activating, make sure that the charge transistor is turned off!
	if(GPIOA->ODR & PIEZO_CHARGE_PIN_HIGH)
 8000a0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d004      	beq.n	8000a24 <dischargePiezo+0x1c>
	{
		GPIOA->BRR = PIEZO_CHARGE_PIN_HIGH; // clear charge pin bit.
 8000a1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
	}


	//Active the transistor to drain the piezo.
	GPIOA->BSRR = PIEZO_DISCHARGE_PIN_HIGH;
 8000a24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a2c:	619a      	str	r2, [r3, #24]
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <getPiezoVoltage>:




static void getPiezoVoltage(int16_t* voltage)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

	//may have to make this a float but we will have to see.
	*voltage = ((ADC_VREF) / (pow(2, 12) - 1)) * adcData;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <getPiezoVoltage+0x48>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe3a 	bl	80006c0 <__aeabi_i2d>
 8000a4c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000a78 <getPiezoVoltage+0x40>)
 8000a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a52:	f7ff fbb9 	bl	80001c8 <__aeabi_dmul>
 8000a56:	4602      	mov	r2, r0
 8000a58:	460b      	mov	r3, r1
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f7ff fe99 	bl	8000794 <__aeabi_d2iz>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	801a      	strh	r2, [r3, #0]

}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	f3af 8000 	nop.w
 8000a78:	e734d9b4 	.word	0xe734d9b4
 8000a7c:	3f4a680c 	.word	0x3f4a680c
 8000a80:	20000028 	.word	0x20000028

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	@ 0x40
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	2228      	movs	r2, #40	@ 0x28
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc74 	bl	8002380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fa52 	bl	8000f64 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f818 	bl	8000afa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fa7c 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aee:	f000 f804 	bl	8000afa <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3740      	adds	r7, #64	@ 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
}
 8000b00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f8b3 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <ADC1_2_IRQHandler>:

/* USER CODE BEGIN 1 */


void ADC1_2_IRQHandler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	if(ADC1->ISR & ADC_READY_BITMASK)
 8000bb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <ADC1_2_IRQHandler+0x22>
	{
		ADCRDY = 1;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <ADC1_2_IRQHandler+0x54>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]

		ADC1->ISR = ~(ADC_READY_BITMASK); //Clear ADC_READY flag.
 8000bc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bcc:	f06f 0201 	mvn.w	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
	}

	if(ADC1->ISR & ADC_EOC_BITMASK)
 8000bd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00b      	beq.n	8000bf8 <ADC1_2_IRQHandler+0x48>
	{
		adcData = (int16_t)(ADC1->DR & 0x0000FFFF);
 8000be0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <ADC1_2_IRQHandler+0x58>)
 8000bea:	801a      	strh	r2, [r3, #0]

		ADC1->ISR =  ~(ADC_EOC_BITMASK); //Clear EOC flag.
 8000bec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bf0:	f06f 0204 	mvn.w	r2, #4
 8000bf4:	601a      	str	r2, [r3, #0]
	}

	return;
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
}
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2000002a 	.word	0x2000002a
 8000c08:	20000028 	.word	0x20000028

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c68 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	@ (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f001 fb97 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fddd 	bl	8000820 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c68:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c74:	08002428 	.word	0x08002428
  ldr r2, =_sbss
 8000c78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c7c:	20000030 	.word	0x20000030

08000c80 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <CAN_RX0_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x28>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x28>)
 8000c8e:	f043 0310 	orr.w	r3, r3, #16
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f931 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff ff32 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40022000 	.word	0x40022000

08000cb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f93b 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 f911 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	2000002c 	.word	0x2000002c

08000d38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000002c 	.word	0x2000002c

08000d50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <__NVIC_SetPriorityGrouping>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f001 b823 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 817d 	beq.w	800129a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fa0:	4bbc      	ldr	r3, [pc, #752]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d00c      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fac:	4bb9      	ldr	r3, [pc, #740]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d15c      	bne.n	8001072 <HAL_RCC_OscConfig+0x10e>
 8000fb8:	4bb6      	ldr	r3, [pc, #728]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc4:	d155      	bne.n	8001072 <HAL_RCC_OscConfig+0x10e>
 8000fc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	095b      	lsrs	r3, r3, #5
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x94>
 8000ff2:	4ba8      	ldr	r3, [pc, #672]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	e015      	b.n	8001024 <HAL_RCC_OscConfig+0xc0>
 8000ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ffc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800100c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001010:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001014:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001020:	4b9c      	ldr	r3, [pc, #624]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8001022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001024:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001028:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800102c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001030:	fa92 f2a2 	rbit	r2, r2
 8001034:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001038:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800103c:	fab2 f282 	clz	r2, r2
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	f042 0220 	orr.w	r2, r2, #32
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	f002 021f 	and.w	r2, r2, #31
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	4013      	ands	r3, r2
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 811f 	beq.w	8001298 <HAL_RCC_OscConfig+0x334>
 800105a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800105e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 8116 	bne.w	8001298 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	f000 bfaf 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x12e>
 8001084:	4b83      	ldr	r3, [pc, #524]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a82      	ldr	r2, [pc, #520]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 800108a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	e036      	b.n	8001100 <HAL_RCC_OscConfig+0x19c>
 8001092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x158>
 80010a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b79      	ldr	r3, [pc, #484]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a78      	ldr	r2, [pc, #480]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e021      	b.n	8001100 <HAL_RCC_OscConfig+0x19c>
 80010bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x184>
 80010ce:	4b71      	ldr	r3, [pc, #452]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a70      	ldr	r2, [pc, #448]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b6e      	ldr	r3, [pc, #440]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6d      	ldr	r2, [pc, #436]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e00b      	b.n	8001100 <HAL_RCC_OscConfig+0x19c>
 80010e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a69      	ldr	r2, [pc, #420]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b67      	ldr	r3, [pc, #412]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a66      	ldr	r2, [pc, #408]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80010fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001100:	4b64      	ldr	r3, [pc, #400]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8001102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001104:	f023 020f 	bic.w	r2, r3, #15
 8001108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800110c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	495f      	ldr	r1, [pc, #380]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8001116:	4313      	orrs	r3, r2
 8001118:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800111e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d059      	beq.n	80011de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fe05 	bl	8000d38 <HAL_GetTick>
 800112e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e00a      	b.n	800114a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fe00 	bl	8000d38 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	@ 0x64
 8001142:	d902      	bls.n	800114a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	f000 bf43 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
 800114a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800114e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800115e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	095b      	lsrs	r3, r3, #5
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <HAL_RCC_OscConfig+0x218>
 8001176:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	e015      	b.n	80011a8 <HAL_RCC_OscConfig+0x244>
 800117c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001180:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001190:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001194:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001198:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80011a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011ac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80011b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80011b4:	fa92 f2a2 	rbit	r2, r2
 80011b8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80011bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80011c0:	fab2 f282 	clz	r2, r2
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	f042 0220 	orr.w	r2, r2, #32
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f002 021f 	and.w	r2, r2, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ab      	beq.n	8001134 <HAL_RCC_OscConfig+0x1d0>
 80011dc:	e05d      	b.n	800129a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fdab 	bl	8000d38 <HAL_GetTick>
 80011e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fda6 	bl	8000d38 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b64      	cmp	r3, #100	@ 0x64
 80011f6:	d902      	bls.n	80011fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f000 bee9 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
 80011fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001202:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001212:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d102      	bne.n	8001230 <HAL_RCC_OscConfig+0x2cc>
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	e015      	b.n	800125c <HAL_RCC_OscConfig+0x2f8>
 8001230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001234:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001244:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001248:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800124c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_RCC_OscConfig+0x330>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001260:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001264:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001268:	fa92 f2a2 	rbit	r2, r2
 800126c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001270:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001274:	fab2 f282 	clz	r2, r2
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	f042 0220 	orr.w	r2, r2, #32
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	f002 021f 	and.w	r2, r2, #31
 8001284:	2101      	movs	r1, #1
 8001286:	fa01 f202 	lsl.w	r2, r1, r2
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1ab      	bne.n	80011e8 <HAL_RCC_OscConfig+0x284>
 8001290:	e003      	b.n	800129a <HAL_RCC_OscConfig+0x336>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 817d 	beq.w	80015aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012b0:	4ba6      	ldr	r3, [pc, #664]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012bc:	4ba3      	ldr	r3, [pc, #652]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d172      	bne.n	80013ae <HAL_RCC_OscConfig+0x44a>
 80012c8:	4ba0      	ldr	r3, [pc, #640]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d16c      	bne.n	80013ae <HAL_RCC_OscConfig+0x44a>
 80012d4:	2302      	movs	r3, #2
 80012d6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80012e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	095b      	lsrs	r3, r3, #5
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0x3a0>
 80012fe:	4b93      	ldr	r3, [pc, #588]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	e013      	b.n	800132c <HAL_RCC_OscConfig+0x3c8>
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800131c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001328:	4b88      	ldr	r3, [pc, #544]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	2202      	movs	r2, #2
 800132e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001332:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001336:	fa92 f2a2 	rbit	r2, r2
 800133a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800133e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001342:	fab2 f282 	clz	r2, r2
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	f002 021f 	and.w	r2, r2, #31
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f202 	lsl.w	r2, r1, r2
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00a      	beq.n	8001374 <HAL_RCC_OscConfig+0x410>
 800135e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d002      	beq.n	8001374 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	f000 be2e 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b75      	ldr	r3, [pc, #468]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800137c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001380:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	21f8      	movs	r1, #248	@ 0xf8
 800138a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001392:	fa91 f1a1 	rbit	r1, r1
 8001396:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800139a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800139e:	fab1 f181 	clz	r1, r1
 80013a2:	b2c9      	uxtb	r1, r1
 80013a4:	408b      	lsls	r3, r1
 80013a6:	4969      	ldr	r1, [pc, #420]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ac:	e0fd      	b.n	80015aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8088 	beq.w	80014d0 <HAL_RCC_OscConfig+0x56c>
 80013c0:	2301      	movs	r3, #1
 80013c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80013d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	461a      	mov	r2, r3
 80013e8:	2301      	movs	r3, #1
 80013ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fca4 	bl	8000d38 <HAL_GetTick>
 80013f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fc9f 	bl	8000d38 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d902      	bls.n	800140c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	f000 bde2 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800141e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	095b      	lsrs	r3, r3, #5
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x4d8>
 8001436:	4b45      	ldr	r3, [pc, #276]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	e013      	b.n	8001464 <HAL_RCC_OscConfig+0x500>
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001454:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001460:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	2202      	movs	r2, #2
 8001466:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800146a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800146e:	fa92 f2a2 	rbit	r2, r2
 8001472:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001476:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f002 021f 	and.w	r2, r2, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0af      	beq.n	80013f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800149e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	21f8      	movs	r1, #248	@ 0xf8
 80014ac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80014b4:	fa91 f1a1 	rbit	r1, r1
 80014b8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80014bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80014c0:	fab1 f181 	clz	r1, r1
 80014c4:	b2c9      	uxtb	r1, r1
 80014c6:	408b      	lsls	r3, r1
 80014c8:	4920      	ldr	r1, [pc, #128]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
 80014ce:	e06c      	b.n	80015aa <HAL_RCC_OscConfig+0x646>
 80014d0:	2301      	movs	r3, #1
 80014d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014da:	fa93 f3a3 	rbit	r3, r3
 80014de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80014e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	461a      	mov	r2, r3
 80014f8:	2300      	movs	r3, #0
 80014fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc1c 	bl	8000d38 <HAL_GetTick>
 8001500:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fc17 	bl	8000d38 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d902      	bls.n	800151c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	f000 bd5a 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800152e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	fab3 f383 	clz	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	095b      	lsrs	r3, r3, #5
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d104      	bne.n	8001550 <HAL_RCC_OscConfig+0x5ec>
 8001546:	4b01      	ldr	r3, [pc, #4]	@ (800154c <HAL_RCC_OscConfig+0x5e8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	e015      	b.n	8001578 <HAL_RCC_OscConfig+0x614>
 800154c:	40021000 	.word	0x40021000
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001574:	4bc8      	ldr	r3, [pc, #800]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	2202      	movs	r2, #2
 800157a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800157e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001582:	fa92 f2a2 	rbit	r2, r2
 8001586:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800158a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800158e:	fab2 f282 	clz	r2, r2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f042 0220 	orr.w	r2, r2, #32
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ad      	bne.n	8001506 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8110 	beq.w	80017e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d079      	beq.n	80016c4 <HAL_RCC_OscConfig+0x760>
 80015d0:	2301      	movs	r3, #1
 80015d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80015e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	4bab      	ldr	r3, [pc, #684]	@ (800189c <HAL_RCC_OscConfig+0x938>)
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	461a      	mov	r2, r3
 80015f6:	2301      	movs	r3, #1
 80015f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fb9d 	bl	8000d38 <HAL_GetTick>
 80015fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb98 	bl	8000d38 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d902      	bls.n	800161a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	f000 bcdb 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800162c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001630:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001672:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 8001676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001680:	2102      	movs	r1, #2
 8001682:	6019      	str	r1, [r3, #0]
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f1a3 	rbit	r1, r3
 8001692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001696:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800169a:	6019      	str	r1, [r3, #0]
  return result;
 800169c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0a0      	beq.n	8001604 <HAL_RCC_OscConfig+0x6a0>
 80016c2:	e08d      	b.n	80017e0 <HAL_RCC_OscConfig+0x87c>
 80016c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016e6:	601a      	str	r2, [r3, #0]
  return result;
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b68      	ldr	r3, [pc, #416]	@ (800189c <HAL_RCC_OscConfig+0x938>)
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	461a      	mov	r2, r3
 8001702:	2300      	movs	r3, #0
 8001704:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb17 	bl	8000d38 <HAL_GetTick>
 800170a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fb12 	bl	8000d38 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d902      	bls.n	8001726 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	f000 bc55 	b.w	8001fd0 <HAL_RCC_OscConfig+0x106c>
 8001726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001744:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001752:	2202      	movs	r2, #2
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001768:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001772:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001790:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 8001794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800179e:	2102      	movs	r1, #2
 80017a0:	6019      	str	r1, [r3, #0]
 80017a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f1a3 	rbit	r1, r3
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017b8:	6019      	str	r1, [r3, #0]
  return result;
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d197      	bne.n	8001710 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 81a1 	beq.w	8001b38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d116      	bne.n	8001836 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a22      	ldr	r2, [pc, #136]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001812:	61d3      	str	r3, [r2, #28]
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800182e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <HAL_RCC_OscConfig+0x93c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <HAL_RCC_OscConfig+0x93c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a16      	ldr	r2, [pc, #88]	@ (80018a0 <HAL_RCC_OscConfig+0x93c>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184e:	f7ff fa73 	bl	8000d38 <HAL_GetTick>
 8001852:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	e009      	b.n	800186c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff fa6e 	bl	8000d38 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	@ 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e3b1      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_RCC_OscConfig+0x93c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ef      	beq.n	8001858 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d10d      	bne.n	80018a4 <HAL_RCC_OscConfig+0x940>
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a02      	ldr	r2, [pc, #8]	@ (8001898 <HAL_RCC_OscConfig+0x934>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e03c      	b.n	8001910 <HAL_RCC_OscConfig+0x9ac>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	10908120 	.word	0x10908120
 80018a0:	40007000 	.word	0x40007000
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0x96a>
 80018b4:	4bc1      	ldr	r3, [pc, #772]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4ac0      	ldr	r2, [pc, #768]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	4bbe      	ldr	r3, [pc, #760]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4abd      	ldr	r2, [pc, #756]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	6213      	str	r3, [r2, #32]
 80018cc:	e020      	b.n	8001910 <HAL_RCC_OscConfig+0x9ac>
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x994>
 80018de:	4bb7      	ldr	r3, [pc, #732]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4ab6      	ldr	r2, [pc, #728]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4bb4      	ldr	r3, [pc, #720]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4ab3      	ldr	r2, [pc, #716]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x9ac>
 80018f8:	4bb0      	ldr	r3, [pc, #704]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4aaf      	ldr	r2, [pc, #700]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	4bad      	ldr	r3, [pc, #692]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4aac      	ldr	r2, [pc, #688]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001914:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8081 	beq.w	8001a24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fa09 	bl	8000d38 <HAL_GetTick>
 8001926:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fa04 	bl	8000d38 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e345      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
 8001944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001948:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001962:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001978:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001986:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001990:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001994:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d102      	bne.n	80019b0 <HAL_RCC_OscConfig+0xa4c>
 80019aa:	4b84      	ldr	r3, [pc, #528]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	e013      	b.n	80019d8 <HAL_RCC_OscConfig+0xa74>
 80019b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019b8:	2202      	movs	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	4b79      	ldr	r3, [pc, #484]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019e0:	2102      	movs	r1, #2
 80019e2:	6011      	str	r1, [r2, #0]
 80019e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	fa92 f1a2 	rbit	r1, r2
 80019f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019f6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019fa:	6011      	str	r1, [r2, #0]
  return result;
 80019fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a00:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	fab2 f282 	clz	r2, r2
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f002 021f 	and.w	r2, r2, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d084      	beq.n	800192c <HAL_RCC_OscConfig+0x9c8>
 8001a22:	e07f      	b.n	8001b24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff f988 	bl	8000d38 <HAL_GetTick>
 8001a28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff f983 	bl	8000d38 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e2c4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a64:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a8c:	601a      	str	r2, [r3, #0]
  return result;
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0xb4e>
 8001aac:	4b43      	ldr	r3, [pc, #268]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	e013      	b.n	8001ada <HAL_RCC_OscConfig+0xb76>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ade:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	6011      	str	r1, [r2, #0]
 8001ae6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	fa92 f1a2 	rbit	r1, r2
 8001af4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001afc:	6011      	str	r1, [r2, #0]
  return result;
 8001afe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b02:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	fab2 f282 	clz	r2, r2
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f002 021f 	and.w	r2, r2, #31
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d184      	bne.n	8001a2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b24:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4a22      	ldr	r2, [pc, #136]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8242 	beq.w	8001fce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_RCC_OscConfig+0xc58>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	f000 8213 	beq.w	8001f7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	f040 8162 	bne.w	8001e2e <HAL_RCC_OscConfig+0xeca>
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b8e:	601a      	str	r2, [r3, #0]
  return result;
 8001b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b94:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ba4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f8c2 	bl	8000d38 <HAL_GetTick>
 8001bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	e00c      	b.n	8001bd4 <HAL_RCC_OscConfig+0xc70>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff f8ba 	bl	8000d38 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1fd      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f2a3 	rbit	r2, r3
 8001bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bf8:	601a      	str	r2, [r3, #0]
  return result;
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_OscConfig+0xcba>
 8001c18:	4bb0      	ldr	r3, [pc, #704]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	e027      	b.n	8001c6e <HAL_RCC_OscConfig+0xd0a>
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c64:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c72:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c76:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c7a:	6011      	str	r1, [r2, #0]
 8001c7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c80:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	fa92 f1a2 	rbit	r1, r2
 8001c8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c8e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c92:	6011      	str	r1, [r2, #0]
  return result;
 8001c94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c98:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	fab2 f282 	clz	r2, r2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f002 021f 	and.w	r2, r2, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d182      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cba:	4b88      	ldr	r3, [pc, #544]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	497f      	ldr	r1, [pc, #508]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d06:	601a      	str	r2, [r3, #0]
  return result;
 8001d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	461a      	mov	r2, r3
 8001d24:	2301      	movs	r3, #1
 8001d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f806 	bl	8000d38 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff f801 	bl	8000d38 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e144      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0xe2c>
 8001d8a:	4b54      	ldr	r3, [pc, #336]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e027      	b.n	8001de0 <HAL_RCC_OscConfig+0xe7c>
 8001d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d94:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001de4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001de8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dec:	6011      	str	r1, [r2, #0]
 8001dee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001df2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fa92 f1a2 	rbit	r1, r2
 8001dfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e04:	6011      	str	r1, [r2, #0]
  return result;
 8001e06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d082      	beq.n	8001d32 <HAL_RCC_OscConfig+0xdce>
 8001e2c:	e0cf      	b.n	8001fce <HAL_RCC_OscConfig+0x106a>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ff60 	bl	8000d38 <HAL_GetTick>
 8001e78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7fe ff5b 	bl	8000d38 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e09e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001eb6:	601a      	str	r2, [r3, #0]
  return result;
 8001eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ec0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d104      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xf7c>
 8001ed6:	4b01      	ldr	r3, [pc, #4]	@ (8001edc <HAL_RCC_OscConfig+0xf78>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e029      	b.n	8001f30 <HAL_RCC_OscConfig+0xfcc>
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ee8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f18:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f26:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_OscConfig+0x1078>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f3c:	6011      	str	r1, [r2, #0]
 8001f3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f42:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	fa92 f1a2 	rbit	r1, r2
 8001f4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f54:	6011      	str	r1, [r2, #0]
  return result;
 8001f56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f002 021f 	and.w	r2, r2, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d180      	bne.n	8001e7e <HAL_RCC_OscConfig+0xf1a>
 8001f7c:	e027      	b.n	8001fce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_RCC_OscConfig+0x1078>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001fb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09e      	sub	sp, #120	@ 0x78
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e162      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b90      	ldr	r3, [pc, #576]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b8d      	ldr	r3, [pc, #564]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	498b      	ldr	r1, [pc, #556]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b89      	ldr	r3, [pc, #548]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e14a      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b82      	ldr	r3, [pc, #520]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	497f      	ldr	r1, [pc, #508]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80dc 	beq.w	800220c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d13c      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xf6>
 800205c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002060:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800206a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d102      	bne.n	8002086 <HAL_RCC_ClockConfig+0xa6>
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	e00f      	b.n	80020a6 <HAL_RCC_ClockConfig+0xc6>
 8002086:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800208a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	667b      	str	r3, [r7, #100]	@ 0x64
 8002094:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002098:	663b      	str	r3, [r7, #96]	@ 0x60
 800209a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020a2:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020ae:	fa92 f2a2 	rbit	r2, r2
 80020b2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80020b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020b6:	fab2 f282 	clz	r2, r2
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	f042 0220 	orr.w	r2, r2, #32
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	f002 021f 	and.w	r2, r2, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f202 	lsl.w	r2, r1, r2
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d17b      	bne.n	80021ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0f3      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d13c      	bne.n	8002158 <HAL_RCC_ClockConfig+0x178>
 80020de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_ClockConfig+0x128>
 8002102:	4b4f      	ldr	r3, [pc, #316]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e00f      	b.n	8002128 <HAL_RCC_ClockConfig+0x148>
 8002108:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800210c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	647b      	str	r3, [r7, #68]	@ 0x44
 8002116:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800211a:	643b      	str	r3, [r7, #64]	@ 0x40
 800211c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002124:	4b46      	ldr	r3, [pc, #280]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800212c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800212e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002130:	fa92 f2a2 	rbit	r2, r2
 8002134:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f042 0220 	orr.w	r2, r2, #32
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f002 021f 	and.w	r2, r2, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d13a      	bne.n	80021ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b2      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
 8002158:	2302      	movs	r3, #2
 800215a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_ClockConfig+0x1a0>
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e00d      	b.n	800219c <HAL_RCC_ClockConfig+0x1bc>
 8002180:	2302      	movs	r3, #2
 8002182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
 800218c:	2302      	movs	r3, #2
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	2202      	movs	r2, #2
 800219e:	61ba      	str	r2, [r7, #24]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	fa92 f2a2 	rbit	r2, r2
 80021a6:	617a      	str	r2, [r7, #20]
  return result;
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e079      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	491a      	ldr	r1, [pc, #104]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fdac 	bl	8000d38 <HAL_GetTick>
 80021e0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fda8 	bl	8000d38 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e061      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d214      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4906      	ldr	r1, [pc, #24]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b04      	ldr	r3, [pc, #16]	@ (800223c <HAL_RCC_ClockConfig+0x25c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e040      	b.n	80022be <HAL_RCC_ClockConfig+0x2de>
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	491a      	ldr	r1, [pc, #104]	@ (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4912      	ldr	r1, [pc, #72]	@ (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002282:	f000 f829 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002286:	4601      	mov	r1, r0
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <HAL_RCC_ClockConfig+0x2e8>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002290:	22f0      	movs	r2, #240	@ 0xf0
 8002292:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	fa92 f2a2 	rbit	r2, r2
 800229a:	60fa      	str	r2, [r7, #12]
  return result;
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	40d3      	lsrs	r3, r2
 80022a6:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x2ec>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <HAL_RCC_ClockConfig+0x2f0>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022b2:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_RCC_ClockConfig+0x2f4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fcfa 	bl	8000cb0 <HAL_InitTick>
  
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3778      	adds	r7, #120	@ 0x78
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	080023f0 	.word	0x080023f0
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022f2:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x30>
 8002302:	2b08      	cmp	r3, #8
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x36>
 8002306:	e026      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 800230a:	613b      	str	r3, [r7, #16]
      break;
 800230c:	e026      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0c9b      	lsrs	r3, r3, #18
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <HAL_RCC_GetSysClockFreq+0x94>)
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	4a14      	ldr	r2, [pc, #80]	@ (8002378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002334:	4a0e      	ldr	r2, [pc, #56]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	fbb2 f2f3 	udiv	r2, r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e004      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0c      	ldr	r2, [pc, #48]	@ (800237c <HAL_RCC_GetSysClockFreq+0xa4>)
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
      break;
 8002354:	e002      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x98>)
 8002358:	613b      	str	r3, [r7, #16]
      break;
 800235a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235c:	693b      	ldr	r3, [r7, #16]
}
 800235e:	4618      	mov	r0, r3
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	007a1200 	.word	0x007a1200
 8002374:	08002400 	.word	0x08002400
 8002378:	08002410 	.word	0x08002410
 800237c:	003d0900 	.word	0x003d0900

08002380 <memset>:
 8002380:	4402      	add	r2, r0
 8002382:	4603      	mov	r3, r0
 8002384:	4293      	cmp	r3, r2
 8002386:	d100      	bne.n	800238a <memset+0xa>
 8002388:	4770      	bx	lr
 800238a:	f803 1b01 	strb.w	r1, [r3], #1
 800238e:	e7f9      	b.n	8002384 <memset+0x4>

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4d0d      	ldr	r5, [pc, #52]	@ (80023c8 <__libc_init_array+0x38>)
 8002394:	4c0d      	ldr	r4, [pc, #52]	@ (80023cc <__libc_init_array+0x3c>)
 8002396:	1b64      	subs	r4, r4, r5
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	2600      	movs	r6, #0
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	4d0b      	ldr	r5, [pc, #44]	@ (80023d0 <__libc_init_array+0x40>)
 80023a2:	4c0c      	ldr	r4, [pc, #48]	@ (80023d4 <__libc_init_array+0x44>)
 80023a4:	f000 f818 	bl	80023d8 <_init>
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	2600      	movs	r6, #0
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	08002420 	.word	0x08002420
 80023cc:	08002420 	.word	0x08002420
 80023d0:	08002420 	.word	0x08002420
 80023d4:	08002424 	.word	0x08002424

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
